;=====================================================================
; Print text sideways to use increased resolution to create more
; columns of text albeit sideways.
;---------------------------------------------------------------------
; Requires 8k+ memory
;---------------------------------------------------------------------
; Copyright (C) 2021 Lawrence Woodman <lwoodman@vlifesystems.com>
; Licensed under an MIT licence.  Please see LICENCE.md for details.
;=====================================================================

; Configuration
; Recommended text modes 64x14, 56x16, 52x16
SNUMCOL     = 64              ; Side number of text columns
                              ; Must be divisible by 4
SNUMROW     = 14              ; Side number of text rows
RVTVORIGIN  = 20              ; Vertical TV picture origin
NLCHR       = $0A             ; Newline character

; Calculated dimensions
RNUMCOL     = SNUMROW         ; Real number of text columns
RNUMROW     = SNUMCOL/4       ; Real number of text rows
LSTSCOL     = SNUMCOL-1       ; Last simulated column


; VIC Registers
VICCR1      = $9001           ; Vertical TV picture origin
VICCR2      = $9002           ; Number of columns, part of screen address
VICCR3      = $9003           ; Number of rows, raster location, char size
VICCR5      = $9005           ; Screen map and character map address

; Display memory location constants
CHRMAPBASE  = $1000           ; Base address of character map
SCRBASE     = $1E00           ; Base address of screen
COLMAPBASE  = $9400           ; Base address of colour map
COLMAPEND   = (COLMAPBASE-1+(RNUMROW*RNUMCOL))  ; End of colour map


; Zero Page Variable Locations
CHRADDR     = $01             ; 16-bit character map address
                              ; used for calculations
COLOFF      = $03             ; 8-bit column offset
SCRADDR     = $05             ; 16-bit screen map address
COLADDR     = $07             ; 16-bit colour map address
CHDEFADDR   = $09             ; 16-bit character def address
CRX         = $0B             ; Cursor x position on simulated screen
CRY         = $0C             ; Cursor y position on simulated screen
STRADDR     = $0D             ; 16-bit address of a string to print
QUARTER     = $0F             ; Quarter in real character to put simulated
                              ; character


            ;--------------------------------
            ; SP_init
            ; Init sideways printing screen
            ;--------------------------------
SP_init     lda  #00          ; Init cursor to top left of screen
            sta  CRX          ; |
            sta  CRY          ; /
            jsr  cfgScr       ; Configure screen
            jsr  initClr      ; Init the colour map
            jsr  initScr      ; Init the screen
            jsr  clrChMap     ; Clear character map

            ; Configure screen
cfgScr      lda  #RVTVORIGIN
            sta  VICCR1       ; Set vertical TV origin
            lda  #(128|RNUMCOL)
            sta  VICCR2       ; Set number of columns displayed
                              ; and screen address
            lda  #((RNUMROW*2)+1)
            sta  VICCR3       ; Set number of rows displayed
                              ; and character size
            lda  #(240|12)    ; Set screen and character map addresses
                              ; to $1E00 and $1000
            sta  VICCR5
            rts

            ; Init the colour map to all a single colour
initClr     .(
            lda  #<COLMAPEND          ; End of colour map
            sta  COLADDR              ; |
            lda  #>COLMAPEND          ; |
            sta  COLADDR+1            ; /

            ldy  #00
loop        lda  #$00                 ; Black forground colour
            sta  (COLADDR),y          ; Init colour map

            ; Decrement address
            lda  COLADDR               ; lsb
            bne  decLo
            dec  COLADDR+1             ; msb
decLo       dec  COLADDR               ; lsb

            lda  COLADDR+1
            cmp  #>COLMAPBASE
            bne  loop
            lda  COLADDR
            bne  loop

            ; TODO Find neater way of doing whole loop
            lda  #$00         ; Black foreground colour
            sta  COLMAPBASE   ; Init colour map first location
            rts
.)


            ; Fill screen map with characters needed
initScr     .(
            lda  #(RNUMCOL-1) ; Init screen address to SCRBASE
            sta  COLOFF       ; |   Store column offset
            sta  SCRADDR      ; |
            lda  #>SCRBASE    ; |
            sta  SCRADDR+1    ; /
            lda  #00          ; The character to output
            ldy  #00

colLoop     ldx  #RNUMROW       ; The number of rows
rowLoop     sta  (SCRADDR), y   ; Store character in screen map
            clc
            adc  #01
            pha

            ; Calc next row address
            clc
            lda  SCRADDR      ; lsb
            adc  #SNUMROW
            sta  SCRADDR      ; lsb
            bcc  addDone
            inc  SCRADDR+1    ; msb

addDone     pla
            dex
            bne  rowLoop

            pha
            dec  COLOFF       ; Move to next column / simulated row
            lda  COLOFF
            cmp  #$FF
            beq  done
            sta  SCRADDR      ; Set screen address to next column
            lda  #>SCRBASE    ; |
            sta  SCRADDR+1    ; /
            pla
            jmp  colLoop

done        pla
            rts
.)

            ; Clear the screen by zeroing the character map
clrChMap    .(
            lda  #$00
            sta  CHRADDR
            lda  #>CHRMAPBASE
            sta  CHRADDR+1
            ldy  #00
loop        lda  #00
            sta  (CHRADDR),y      ; Set character map location
            inc  CHRADDR          ; Increment CHRADDR
            bne  doneInc          ; |
            inc  CHRADDR+1        ; /
doneInc     lda  CHRADDR+1
            cmp  #>SCRBASE
            bne  loop
            rts
.)


            ;-----------------------------------------
            ; putch
            ; Print a character to screen at cursor
            ; and move cursor
            ;-----------------------------------------
            ; ACC - character to print
            ;-----------------------------------------
putch       .(
            cmp  #NLCHR
            beq  newline      ; If newline character

printCh     pha
            lda  CRX
            tax
            lda  CRY
            tay
            pla
            jsr  putchxy

            ; Move cursor
            lda  CRX
            cmp  #LSTSCOL
            bne  nextCol

            ; Move cursor to next line
newline     lda  #0
            sta  CRX
            inc  CRY
            bne  done         ; Equivalant to JMP

nextCol     inc  CRX
done        rts
.)

            ;-----------------------------------------
            ; putchxy
            ; Print a character to screen at position
            ; specified
            ;-----------------------------------------
            ; ACC - character to print
            ;   X - Column on simulated screen
            ;   Y - Row on simulated screen
            ;-----------------------------------------
putchxy     .(
            pha               ; Push character to stack
            lda  #$00         ; Zero CHRADDR
            sta  CHRADDR      ; |
            lda  #$00         ; |
            sta  CHRADDR+1    ; /
            txa
            pha               ; Push column to stack

            ; Find location of simulated column pair
findCol     lsr               ; Quarter the column
            lsr               ; /
            sta  CHRADDR      ; lsb

            ; Find location of simulated row
findRow     cpy  #00
            beq  mul16
            ; Add number of real rows to address
            clc
            lda  CHRADDR      ; lsb
            adc  #RNUMROW
            sta  CHRADDR      ; lsb
            bcc  addDone1
            inc  CHRADDR+1    ; msb
addDone1    dey
            jmp  findRow


mul16       ; TODO find better name

            ; Multiply by 16 to find location of character
            ; Shift left 4 times to multiply by 16
            asl  CHRADDR       ; lsb
            rol  CHRADDR+1     ; msb
            asl  CHRADDR       ; lsb
            rol  CHRADDR+1     ; msb
            asl  CHRADDR       ; lsb
            rol  CHRADDR+1     ; msb
            asl  CHRADDR       ; lsb
            rol  CHRADDR+1     ; msb

            ; Add $1000 as address of character map
            clc
            lda  CHRADDR+1    ; msb
            adc  #>CHRMAPBASE
            sta  CHRADDR+1    ; msb


            ; Find position in 16-bit character size
            pla               ; Pull column off stack
            and  #3           ; Look at right 2 bits
            asl
            asl
            ora  CHRADDR
            sta  CHRADDR


            ; Copy the character to the screen
copyCh      lda  #00
            sta  CHDEFADDR+1
            pla
            sec
            sbc  #32          ; Font definitions are from space onwards
            sta  CHDEFADDR    ; Multiply character by 4
            asl  CHDEFADDR    ; |
            rol  CHDEFADDR+1  ; |
            asl  CHDEFADDR    ; |
            rol  CHDEFADDR+1  ; /

            clc
            lda  CHDEFADDR
            adc  #<fontDef     ; lsb
            sta  CHDEFADDR
            lda  CHDEFADDR+1
            adc  #>fontDef     ; msb
            sta  CHDEFADDR+1

            ldy  #4
copyLoop    lda  (CHDEFADDR),y
            sta  (CHRADDR),y
            dey
            bne  copyLoop
            rts
.)


            ;----------------------------------------
            ; printStr
            ; Print string
            ;----------------------------------------
            ; STRADDR - Location of zero terminated
            ;           string
            ;----------------------------------------
printStr   .(
            ldy  #00
loop        tya
            pha
            lda  (STRADDR), y
            beq  done
            jsr  putch
            pla
            tay
            iny
            jmp  loop
done        pla
            rts
.)


#include "fontdef.a65"        ; The font definitions
